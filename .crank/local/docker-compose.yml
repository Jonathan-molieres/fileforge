version: "3.9"
services:
  nginx:
    image: nginx:1.21-alpine
    container_name: ${PROJECT_NAME}-nginx
    env_file: ${ENV_FILE}
    ports:
      - ${PORT}:80
    volumes:
      - ${PROJECT_PATH}/.crank/local/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    restart: unless-stopped
    depends_on: [front, api, admin, worker]

  front:
    build:
      context: ${PROJECT_PATH}/front
      args:
        GITLAB_TOKEN: ${GITLAB_TOKEN}
        NODE_ENV: development
        BUILDKIT_INLINE_CACHE: 1
    container_name: ${PROJECT_NAME}-front
    env_file: ${ENV_FILE}
    volumes:
      - ${PROJECT_PATH}/front:/app
    command: yarn run start
    restart: unless-stopped

  back: &back
    build:
      context: ${PROJECT_PATH}/back
      target: base
      args:
        GITLAB_TOKEN: ${GITLAB_TOKEN}
        PYTHON_ENV: development
        BUILDKIT_INLINE_CACHE: 1
    image: ${PROJECT_NAME}-back
    environment:
      DEBUG: 1
      DEV_MODE: 1
      TEST_MODE: 1
    tty: true
    depends_on: [elasticsearch, database, redis]
    env_file: ${ENV_FILE}
    volumes:
      - ${PROJECT_PATH}/back:/app/
    restart: unless-stopped

  api:
    <<: *back
    container_name: ${PROJECT_NAME}-api
    command: fastapi-start --reload --reload-dir="/app" --reload-exclude="migrations/*" --reload-exclude=".venv/*"

  worker:
    <<: *back
    container_name: ${PROJECT_NAME}-worker
    command: python watchfiles --filter python './entrypoint celery-start'

  scheduler:
    <<: *back
    container_name: ${PROJECT_NAME}-schedulers
    command: python watchfiles --filter python './entrypoint celery-schedule'

  admin:
    <<: *back
    container_name: ${PROJECT_NAME}-admin
    command: manage runserver 0.0.0.0:8080

  redis:
    image: redis:7.0-alpine
    restart: always
    container_name: ${PROJECT_NAME}-redis
    volumes:
      - redis:/data

  database:
    image: postgis/postgis:16-master
    container_name: ${PROJECT_NAME}-database
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
    restart: unless-stopped
    command: postgres -c listen_addresses='*'
    volumes:
      - database:/var/lib/postgresql/data

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: ${PROJECT_NAME}-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - cluster.routing.allocation.disk.watermark.low=97%
      - cluster.routing.allocation.disk.watermark.high=98%
      - cluster.routing.allocation.disk.watermark.flood_stage=99%
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data
    restart: unless-stopped

volumes:
  elasticsearch:
    name: ${PROJECT_NAME}-elasticsearch
  database:
    name: ${PROJECT_NAME}-database
  redis:
    name: ${PROJECT_NAME}-redis
